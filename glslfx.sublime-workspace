{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"kAbsolte",
				"kAbsolute"
			],
			[
				"bez",
				"bezierPoints"
			],
			[
				"Vect",
				"Vector2f"
			],
			[
				"be",
				"bezierList"
			],
			[
				"num",
				"numBeziers"
			],
			[
				"Vec",
				"Vector2f"
			],
			[
				"numS",
				"numSegments"
			],
			[
				"bezier",
				"bezierPoints"
			],
			[
				"auto",
				"automaton"
			],
			[
				"Vectr",
				"Vector2f"
			],
			[
				"kNum",
				"kNumElements"
			],
			[
				"kNu",
				"kNumIterations"
			],
			[
				"adaptiveE",
				"adaptiveEfficiency"
			],
			[
				"kModel",
				"kModelMass"
			],
			[
				"is",
				"isDebug"
			],
			[
				"Model",
				"ModelType"
			],
			[
				"rin",
				"ringBufferBit"
			],
			[
				"ring",
				"ringBuffer"
			],
			[
				"uint",
				"uint16_t"
			],
			[
				"kMod",
				"kModelMinMass"
			],
			[
				"k",
				"kModelMinMass"
			],
			[
				"elemet",
				"elementidx"
			],
			[
				"chara",
				"character"
			],
			[
				"0x",
				"0x80000000"
			],
			[
				"bits",
				"bitsPerSymbol"
			],
			[
				"frequen",
				"frequencyTable"
			],
			[
				"print",
				"printModel"
			],
			[
				"kM",
				"kModelPrecision"
			],
			[
				"Gener",
				"GenerateNormalisedGaussianKernel1D"
			],
			[
				"m_",
				"m_Model"
			],
			[
				"bitPla",
				"bitPlanes"
			],
			[
				"message",
				"messageList"
			],
			[
				"packed",
				"packedMessageLength"
			],
			[
				"alphab",
				"alphabet"
			],
			[
				"alp",
				"alphabet"
			],
			[
				"Test",
				"TestResult"
			],
			[
				"alphabe",
				"alphabetVariance"
			],
			[
				"alph",
				"alphabetLength"
			],
			[
				"under",
				"underflowDepth"
			],
			[
				"score",
				"scores"
			],
			[
				"com",
				"computeDisagreementScore"
			],
			[
				"dis",
				"disagreementScore"
			],
			[
				"current",
				"currentElement"
			],
			[
				"compute",
				"computeMeanVariance"
			],
			[
				"issue",
				"issueDescriptions"
			],
			[
				"members",
				"memberList"
			],
			[
				"group",
				"groupIdxA"
			],
			[
				"grou",
				"groupList"
			],
			[
				"RgbTo",
				"RgbToYuv"
			],
			[
				"m_co",
				"m_colourSpaceTransform"
			],
			[
				"grey",
				"grey_lambert"
			],
			[
				"active",
				"activeCameraId"
			],
			[
				"emis",
				"emissive_lambert"
			],
			[
				"m_row",
				"m_rowDataOffset"
			],
			[
				"max",
				"m_MaxPoolSizeElements"
			],
			[
				"scene",
				"sceneContext"
			],
			[
				"ext",
				"extantRay"
			],
			[
				"inc",
				"incidentIntersection"
			],
			[
				"incid",
				"incidentRay"
			],
			[
				"gre",
				"grey_lambert"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/2d/ImageCodec.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/core/SphericalHarmonics.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/shadertoy/simplex/BufferA.glsl",
			"settings":
			{
				"buffer_size": 13199,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAryIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAACvIgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAwJwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABUKAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAADMwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/shadertoy/simplex/Common.glsl",
			"settings":
			{
				"buffer_size": 28047,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAD7ZgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAimYAAAAAAAAAAAAAimYAAAAAAACKZgAAAAAAAIpmAAAjZGVmaW5lIGtDbGlwVmlldyAxCgojZGVmaW5lIGtTY3JlZW5Eb3duc2FtcGxlIDEKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gR2xvYmFsIHZhcmlhYmxlcwoKdmVjMiBnUmVzb2x1dGlvbjsKdmVjMiBnRnJhZ0Nvb3JkOwp1dmVjNCBybmdTZWVkOwpmbG9hdCBnRHh5RHV2OwoKdm9pZCBTZXRHbG9iYWxzKHZlYzIgZnJhZ0Nvb3JkLCB2ZWMyIHJlc29sdXRpb24pCnsKICAgIGdGcmFnQ29vcmQgPSBmcmFnQ29vcmQ7CiAgICBnUmVzb2x1dGlvbiA9IHJlc29sdXRpb247CiAgICAKICAgICAvLyBGaXJzdCBkZXJpdmF0aXZlIG9mIHNjcmVlbiB0byB3b3JsZCBzcGFjZSAoYXNzdW1pbmcgc3F1YXJlIHBpeGVscykKICAgIGdEeHlEdXYgPSAxLjAgLyBnUmVzb2x1dGlvbi54Owp9Cgpib29sIElzVGV4ZWxJbkNsaXBSZWdpb24odmVjMiB4eSkKewojaWYga0NsaXBWaWV3ID09IDEKICAgIHJldHVybiAoYWJzKHh5LnggLSAoZ1Jlc29sdXRpb24ueCAvIDIuMCkpIDwgZ1Jlc29sdXRpb24ueSAvIDIuMCk7CiNlbHNlCiAgICByZXR1cm4gdHJ1ZTsKI2VuZGlmCn0KCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gICAgTWF0aCBmdW5jdGlvbnMKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKI2RlZmluZSBrUGkgICAgICAgICAgICAgICAgICAgIDMuMTQxNTkyNjUzNTkKI2RlZmluZSBrSW52UGkgICAgICAgICAgICAgICAgICgxLjAgLyAzLjE0MTU5MjY1MzU5KQojZGVmaW5lIGtUd29QaSAgICAgICAgICAgICAgICAgKDIuMCAqIGtQaSkKI2RlZmluZSBrSGFsZlBpICAgICAgICAgICAgICAgICgwLjUgKiBrUGkpCiNkZWZpbmUga1Jvb3QyICAgICAgICAgICAgICAgICAxLjQxNDIxMzU2MjM3CiNkZWZpbmUga0ZsdE1heCAgICAgICAgICAgICAgICAzLjQwMjgyMzQ2NmUrMzgKI2RlZmluZSBrSW50TWF4ICAgICAgICAgICAgICAgIDB4N2ZmZmZmZmYKI2RlZmluZSBrT25lICAgICAgICAgICAgICAgICAgIHZlYzMoMS4wKQojZGVmaW5lIGtaZXJvICAgICAgICAgICAgICAgICAgdmVjMygwLjApCiNkZWZpbmUga1BpbmsgICAgICAgICAgICAgICAgICB2ZWMzKDEuMCwgMC4wLCAwLjIpCgpmbG9hdCBjdWJydChmbG9hdCBhKSAgICAgICAgICAgeyByZXR1cm4gc2lnbihhKSAqIHBvdyhhYnMoYSksIDEuMCAvIDMuMCk7IH0KZmxvYXQgdG9SYWQoZmxvYXQgZGVnKSAgICAgICAgIHsgcmV0dXJuIGtUd29QaSAqIGRlZyAvIDM2MC4wOyB9CmZsb2F0IHRvRGVnKGZsb2F0IHJhZCkgICAgICAgICB7IHJldHVybiAzNjAuMCAqIHJhZCAvIGtUd29QaTsgfQpmbG9hdCBzcXIoZmxvYXQgYSkgICAgICAgICAgICAgeyByZXR1cm4gYSAqIGE7IH0KdmVjMyBzcXIodmVjMyBhKSAgICAgICAgICAgICAgIHsgcmV0dXJuIGEgKiBhOyB9CmludCBzcXIoaW50IGEpICAgICAgICAgICAgICAgICB7IHJldHVybiBhICogYTsgfQppbnQgbW9kMihpbnQgYSwgaW50IGIpICAgICAgICAgeyByZXR1cm4gKChhICUgYikgKyBiKSAlIGI7IH0KZmxvYXQgbW9kMihmbG9hdCBhLCBmbG9hdCBiKSAgIHsgcmV0dXJuIG1vZChtb2QoYSwgYikgKyBiLCBiKTsgfQp2ZWMzIG1vZDIodmVjMyBhLCB2ZWMzIGIpICAgICAgeyByZXR1cm4gbW9kKG1vZChhLCBiKSArIGIsIGIpOyB9CmZsb2F0IGxlbmd0aDIodmVjMiB2KSAgICAgICAgICB7IHJldHVybiBkb3Qodiwgdik7IH0KZmxvYXQgbGVuZ3RoMih2ZWMzIHYpICAgICAgICAgIHsgcmV0dXJuIGRvdCh2LCB2KTsgfQppbnQgc3VtKGl2ZWMyIGEpICAgICAgICAgICAgICAgeyByZXR1cm4gYS54ICsgYS55OyB9CmZsb2F0IGx1bWluYW5jZSh2ZWMzIHYpICAgICAgICB7IHJldHVybiB2LnggKiAwLjE3NjkxICsgdi55ICogMC44MTI0ICsgdi56ICogMC4wMTA2MzsgfQpmbG9hdCBtZWFuKHZlYzMgdikgICAgICAgICAgICAgeyByZXR1cm4gdi54IC8gMy4wICsgdi55IC8gMy4wICsgdi56IC8gMy4wOyB9CnZlYzQgbXVsNCh2ZWMzIGEsIG1hdDQgbSkgICAgICB7IHJldHVybiB2ZWM0KGEsIDEuMCkgKiBtOyB9CnZlYzMgbXVsMyh2ZWMzIGEsIG1hdDQgbSkgICAgICB7IHJldHVybiAodmVjNChhLCAxLjApICogbSkueHl6OyB9CmZsb2F0IHNpbjAxKGZsb2F0IGEpICAgICAgICAgICB7IHJldHVybiAwLjUgKiBzaW4oYSkgKyAwLjU7IH0KZmxvYXQgY29zMDEoZmxvYXQgYSkgICAgICAgICAgIHsgcmV0dXJuIDAuNSAqIGNvcyhhKSArIDAuNTsgfQpmbG9hdCBzYXR1cmF0ZShmbG9hdCBhKSAgICAgICAgeyByZXR1cm4gY2xhbXAoYSwgMC4wLCAxLjApOyB9CnZlYzMgc2F0dXJhdGUodmVjMyBhKSAgICAgICAgeyByZXR1cm4gY2xhbXAoYSwgMC4wLCAxLjApOyB9CmZsb2F0IHNhdzAxKGZsb2F0IGEpICAgICAgICAgICB7IHJldHVybiBhYnMoZnJhY3QoYSkgKiAyLjAgLSAxLjApOyB9CmZsb2F0IGN3aXNlTWF4KHZlYzMgdikgICAgICAgICB7IHJldHVybiAodi54ID4gdi55KSA/ICgodi54ID4gdi56KSA/IHYueCA6IHYueikgOiAoKHYueSA+IHYueikgPyB2LnkgOiB2LnopOyB9CmZsb2F0IGN3aXNlTWF4KHZlYzIgdikgICAgICAgICB7IHJldHVybiAodi54ID4gdi55KSA/IHYueCA6IHYueTsgfQpmbG9hdCBjd2lzZU1pbih2ZWMzIHYpICAgICAgICAgeyByZXR1cm4gKHYueCA8IHYueSkgPyAoKHYueCA8IHYueikgPyB2LnggOiB2LnopIDogKCh2LnkgPCB2LnopID8gdi55IDogdi56KTsgfQpmbG9hdCBjd2lzZU1pbih2ZWMyIHYpICAgICAgICAgeyByZXR1cm4gKHYueCA8IHYueSkgPyB2LnggOiB2Lnk7IH0Kdm9pZCBzb3J0KGlub3V0IGZsb2F0IGEsIGlub3V0IGZsb2F0IGIpIHsgaWYoYSA+IGIpIHsgZmxvYXQgcyA9IGE7IGEgPSBiOyBiID0gczsgfSB9CnZvaWQgc3dhcChpbm91dCBmbG9hdCBhLCBpbm91dCBmbG9hdCBiKSB7IGZsb2F0IHMgPSBhOyBhID0gYjsgYiA9IHM7IH0KCnZlYzMgc2FmZUF0YW4odmVjMyBhLCB2ZWMzIGIpCnsKICAgIHZlYzMgcjsKICAgICNkZWZpbmUga0F0YW5FcHNpbG9uIDFlLTEwCiAgICByLnggPSAoYWJzKGEueCkgPCBrQXRhbkVwc2lsb24gJiYgYWJzKGIueCkgPCBrQXRhbkVwc2lsb24pID8gMC4wIDogYXRhbihhLngsIGIueCk7IAogICAgci55ID0gKGFicyhhLnkpIDwga0F0YW5FcHNpbG9uICYmIGFicyhiLnkpIDwga0F0YW5FcHNpbG9uKSA/IDAuMCA6IGF0YW4oYS55LCBiLnkpOyAKICAgIHIueiA9IChhYnMoYS56KSA8IGtBdGFuRXBzaWxvbiAmJiBhYnMoYi56KSA8IGtBdGFuRXBzaWxvbikgPyAwLjAgOiBhdGFuKGEueiwgYi56KTsgCiAgICByZXR1cm4gcjsKfQoKZmxvYXQgU21vb3RoU3RlcChmbG9hdCBhLCBmbG9hdCBiLCBmbG9hdCB4KSB7IHJldHVybiBtaXgoYSwgYiwgeCAqIHggKiAoMy4wIC0gMi4wICogeCkpOyB9CnZlYzQgU21vb3RoU3RlcCh2ZWM0IGEsIHZlYzQgYiwgZmxvYXQgeCkgICAgeyByZXR1cm4gbWl4KGEsIGIsIHggKiB4ICogKDMuMCAtIDIuMCAqIHgpKTsgfQpmbG9hdCBTbW9vdGhTdGVwKGZsb2F0IHgpICAgICAgICAgICAgICAgICAgIHsgcmV0dXJuIG1peCgwLjAsIDEuMCwgeCAqIHggKiAoMy4wIC0gMi4wICogeCkpOyB9CgpmbG9hdCBQYWRkZWRTbW9vdGhTdGVwKGZsb2F0IHgsIGZsb2F0IGEsIGZsb2F0IGIpCnsgCiAgICByZXR1cm4gU21vb3RoU3RlcChzYXR1cmF0ZSh4ICogKGEgKyBiICsgMS4wKSAtIGEpKTsKfQoKZmxvYXQgUGFkZGVkU21vb3RoU3RlcChmbG9hdCB4LCBmbG9hdCBhKQp7CiAgICByZXR1cm4gUGFkZGVkU21vb3RoU3RlcCh4LCBhLCBhKTsKfQoKZmxvYXQgSW1wdWxzZShmbG9hdCB4LCBmbG9hdCBheGlzLCBmbG9hdCBzdGREZXYpCnsKICAgIHJldHVybiBleHAoLXNxcigoeCAtIGF4aXMpIC8gc3RkRGV2KSk7Cn0KCmZsb2F0IEFuaXNvdHJvcGljSW1wdWxzZShmbG9hdCB4LCBmbG9hdCBheGlzLCBmbG9hdCBzdGREZXZBLCBmbG9hdCBzdGREZXZCKQp7CiAgICBmbG9hdCBpbXB1bHNlID0gKHggPCBheGlzKSA/IGV4cCgtc3FyKCh4IC0gYXhpcykgLyBzdGREZXZBKSkgOiBleHAoLXNxcigoeCAtIGF4aXMpIC8gc3RkRGV2QikpOwogICAgcmV0dXJuIHNhdHVyYXRlKChpbXB1bHNlIC0gMC4wNSkgLyAoMS4wIC0gMC4wNSkpOwp9CgpmbG9hdCBLaWNrRHJvcChmbG9hdCB0LCB2ZWMyIHAwLCB2ZWMyIHAxLCB2ZWMyIHAyLCB2ZWMyIHAzKQp7CiAgICBpZih0IDwgcDEueCkKICAgIHsKICAgICAgICByZXR1cm4gbWl4KHAwLnksIHAxLnksIG1heCgwLjAsIGV4cCgtc3FyKCh0IC0gcDEueCkqMi4xNDU5NjYwMjYyODkzNDcvKHAxLngtcDAueCkpKSAtIDAuMDEpIC8gMC45OSk7CiAgICB9CiAgICBlbHNlIGlmKHQgPCBwMi54KQogICAgewogICAgICAgIHJldHVybiBtaXgocDEueSwgcDIueSwgKHQgLSBwMS54KSAvIChwMi54IC0gcDEueCkpOwogICAgfQogICAgZWxzZQogICAgeyAgCiAgICAgICAgcmV0dXJuIG1peChwMy55LCBwMi55LCBtYXgoMC4wLCBleHAoLXNxcigodCAtIHAyLngpKjIuMTQ1OTY2MDI2Mjg5MzQ3LyhwMy54LXAyLngpKSkgLSAwLjAxKSAvIDAuOTkpOwogICAgfQp9CgpmbG9hdCBLaWNrRHJvcChmbG9hdCB0LCB2ZWMyIHAwLCB2ZWMyIHAxLCB2ZWMyIHAyKQp7CiAgICByZXR1cm4gS2lja0Ryb3AodCwgcDAsIHAxLCBwMSwgcDIpOwp9Cgpib29sIFF1YWRyYXRpY1NvbHZlKGZsb2F0IGEsIGZsb2F0IGIsIGZsb2F0IGMsIG91dCBmbG9hdCB0MCwgb3V0IGZsb2F0IHQxKQp7CiAgICBmbG9hdCBiMmFjNCA9IGIgKiBiIC0gNC4wICogYSAqIGM7CiAgICBpZihiMmFjNCA8IDAuMCkgeyByZXR1cm4gZmFsc2U7IH0gCgogICAgZmxvYXQgc3FydGIyYWM0ID0gc3FydChiMmFjNCk7CiAgICB0MCA9ICgtYiArIHNxcnRiMmFjNCkgLyAoMi4wICogYSk7CiAgICB0MSA9ICgtYiAtIHNxcnRiMmFjNCkgLyAoMi4wICogYSk7ICAgIAogICAgcmV0dXJuIHRydWU7Cn0KCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gICAgMkQgU1ZHCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCmZsb2F0IFNERkxpbmUodmVjMiBwLCB2ZWMyIHYwLCB2ZWMyIHYxLCBmbG9hdCB0aGlja25lc3MpCnsKICAgIHYxIC09IHYwOwogICAgZmxvYXQgdCA9IHNhdHVyYXRlKChkb3QocCwgdjEpIC0gZG90KHYwLCB2MSkpIC8gZG90KHYxLCB2MSkpOwogICAgdmVjMiBwZXJwID0gdjAgKyB0ICogdjE7CiAgICByZXR1cm4gc2F0dXJhdGUoKHRoaWNrbmVzcyAtIGxlbmd0aChwIC0gcGVycCkpIC8gZ0R4eUR1dik7Cn0KCmZsb2F0IFNERlF1YWQodmVjMiBwLCB2ZWMyIHZbNF0sIGZsb2F0IHRoaWNrbmVzcykKewogICAgZmxvYXQgYyA9IDAuMDsKICAgIGZvcihpbnQgaSA9IDA7IGkgPCA0OyBpKyspCiAgICB7CiAgICAgICAgYyA9IG1heChjLCBTREZMaW5lKHAsIHZbaV0sIHZbKGkrMSklNF0sIHRoaWNrbmVzcykpOyAKICAgIH0KIAogICAgcmV0dXJuIGM7Cn0KCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gICAgMkQgcHJpbWl0aXZlIHRlc3RzCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCmJvb2wgSXNQb2ludEluUXVhZCh2ZWMyIHV2LCB2ZWMyIHZbNF0pCnsKICAgIGZvcihpbnQgaSA9IDA7IGkgPCA0OyBpKyspCiAgICB7CiAgICAgICAgaWYoZG90KHV2IC0gdltpXSwgdltpXSAtIHZbKGkrMSklNF0pID4gMC4wKSB7IHJldHVybiBmYWxzZTsgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gICAgVHJhbnNmb3JtcyAKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKbWF0MyBXb3JsZFRvVmlld01hdHJpeChmbG9hdCByb3QsIHZlYzIgdHJhbnMsIGZsb2F0IHNjYSkKeyAgIAogICAgcmV0dXJuIG1hdDModmVjMyhjb3Mocm90KSAvIHNjYSwgc2luKHJvdCkgLyBzY2EsIHRyYW5zLngpLCAKICAgICAgICAgICAgICAgIHZlYzMoLXNpbihyb3QpIC8gc2NhLCBjb3Mocm90KSAvIHNjYSwgdHJhbnMueSksCiAgICAgICAgICAgICAgICB2ZWMzKDAuMCwgMC4wLCAxLjApKTsKfQoKbWF0MyBXb3JsZFRvVmlld01hdHJpeCh2ZWMyIHRyYW5zLCBmbG9hdCBzY2EpCnsgICAKICAgIHJldHVybiBtYXQzKHZlYzMoMS4wIC8gc2NhLCAwLjAsIHRyYW5zLngpLCAKICAgICAgICAgICAgICAgIHZlYzMoMC4wLCAxLjAgLyBzY2EsIHRyYW5zLnkpLAogICAgICAgICAgICAgICAgdmVjMygwLjAsIDAuMCwgMS4wKSk7Cn0KCnZlYzIgVHJhbnNmb3JtU2NyZWVuVG9Xb3JsZCh2ZWMyIHApCnsgICAKICAgIHJldHVybiAocCAtIHZlYzIoZ1Jlc29sdXRpb24ueHkpICogMC41KSAvIGZsb2F0KGdSZXNvbHV0aW9uLnkpOyAKfQoKCnZlYzMgQ2FydGVzaWFuMkRUb0JhcnljZW50cmljKHZlYzIgcCkKeyAgICAKICAgIHJldHVybiB2ZWMzKHAsIDAuMCkgKiBtYXQzKHZlYzMoMC4wLCAxLjAgLyAwLjg2NjAyNTQwMzc4NDQzODcsIDAuMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMygxLjAsIDAuNTc3MzUwMjY5MTg5NjI1NywgMC4wKSwKICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzKC0xLjAsIDAuNTc3MzUwMjY5MTg5NjI1NywgMC4wKSk7CiAgICAKfQoKLy8gTWFwcyBhbiBpbnB1dCB1diBwb3NpdGlvbiB0byBwZXJpb2RpYyBoZXhhZ29uYWwgdGlsaW5nCi8vICAgICBpbm91dCB2ZWMyIHV2OiBUaGUgbWFwcGVkIHV2IGNvb3JkaW5hdGUKLy8gICAgIG91dCB2ZWMzIGJhcnk6IFRoZSBCYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBhdCB0aGUgcG9pbnQgb24gdGhlIGhleGFnb24KLy8gICAgIG91dCBpdmVjMiBpajogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIHRpbGUKdmVjMiBDYXJ0ZXNpYW4yRFRvSGV4YWdvbmFsVGlsaW5nKGluIHZlYzIgdXYsIG91dCB2ZWMzIGJhcnksIG91dCBpdmVjMiBpaikKeyAgICAKICAgICNkZWZpbmUga0hleFJhdGlvIHZlYzIoMS41LCAwLjg2NjAyNTQwMzc4NDQzODcpCiAgICB2ZWMyIHV2Q2xpcCA9IG1vZCh1diArIGtIZXhSYXRpbywgMi4wICoga0hleFJhdGlvKSAtIGtIZXhSYXRpbzsKICAgIAogICAgaWogPSBpdmVjMigodXYgKyBrSGV4UmF0aW8pIC8gKDIuMCAqIGtIZXhSYXRpbykpICogMjsKICAgIGlmKHV2LnggKyBrSGV4UmF0aW8ueCA8PSAwLjApIGlqLnggLT0gMjsKICAgIGlmKHV2LnkgKyBrSGV4UmF0aW8ueSA8PSAwLjApIGlqLnkgLT0gMjsKICAgIAogICAgYmFyeSA9IENhcnRlc2lhbjJEVG9CYXJ5Y2VudHJpYyh1dkNsaXApOwogICAgaWYoYmFyeS54ID4gMC4wKQogICAgewogICAgICAgIGlmKGJhcnkueiA+IDEuMCkgeyBiYXJ5ICs9IHZlYzMoLTEuMCwgMS4wLCAtMi4wKTsgaWogKz0gaXZlYzIoLTEsIDEpOyB9CiAgICAgICAgZWxzZSBpZihiYXJ5LnkgPiAxLjApIHsgYmFyeSArPSB2ZWMzKC0xLjAsIC0yLjAsIDEuMCk7IGlqICs9IGl2ZWMyKDEsIDEpOyB9CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYoYmFyeS55IDwgLTEuMCkgeyBiYXJ5ICs9IHZlYzMoMS4wLCAyLjAsIC0xLjApOyBpaiArPSBpdmVjMigtMSwgLTEpOyB9CiAgICAgICAgZWxzZSBpZihiYXJ5LnogPCAtMS4wKSB7IGJhcnkgKz0gdmVjMygxLjAsIC0xLjAsIDIuMCk7IGlqICs9IGl2ZWMyKDEsIC0xKTsgfQogICAgfQoKICAgIHJldHVybiB2ZWMyKGJhcnkueSAqIDAuNTc3MzUwMjY5MTg5NjI1NyAtIGJhcnkueiAqIDAuNTc3MzUwMjY5MTg5NjI1NywgYmFyeS54KTsKfQoKYm9vbCBJbnZlcnNlU3Rlcm5vZ3JhcGgoaW5vdXQgdmVjMiB1diwgZmxvYXQgem9vbSkKewogICAgZmxvYXQgdGhldGEgPSBsZW5ndGgodXYpICoga1BpICogem9vbTsKICAgIGlmKHRoZXRhID49IGtQaSAtIDFlLTEpIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAKICAgIGZsb2F0IHBoaSA9IGF0YW4oLXV2LnksIC11di54KSArIGtQaTsKICAgIAogICAgdmVjMyBzcGggPSB2ZWMzKGNvcyhwaGkpICogc2luKHRoZXRhKSwgc2luKHBoaSkgKiBzaW4odGhldGEpLCAtY29zKHRoZXRhKSk7CiAgICAKICAgIHV2ID0gdmVjMihzcGgueCAvICgxLjAgLSBzcGgueiksIHNwaC55IC8gKDEuMCAtIHNwaC56KSk7CiAgICByZXR1cm4gdHJ1ZTsKfQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovLyAgICBSYW5kb20gbnVtYmVyIGdlbmVyYXRpb24KLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLy8gUGVybXV0ZWQgY29uZ3J1ZW50aWFsIGdlbmVyYXRvciBmcm9tICJIYXNoIEZ1bmN0aW9ucyBmb3IgR1BVIFJlbmRlcmluZyIgKEphcnp5bnNraSBhbmQgT2xhbm8pCi8vIGh0dHA6Ly9qY2d0Lm9yZy9wdWJsaXNoZWQvMDAwOS8wMy8wMi9wYXBlci5wZGYKdXZlYzQgUENHQWR2YW5jZSgpCnsKICAgIHJuZ1NlZWQgPSBybmdTZWVkICogMTY2NDUyNXUgKyAxMDEzOTA0MjIzdTsKICAgIAogICAgcm5nU2VlZC54ICs9IHJuZ1NlZWQueSpybmdTZWVkLnc7IAogICAgcm5nU2VlZC55ICs9IHJuZ1NlZWQueipybmdTZWVkLng7IAogICAgcm5nU2VlZC56ICs9IHJuZ1NlZWQueCpybmdTZWVkLnk7IAogICAgcm5nU2VlZC53ICs9IHJuZ1NlZWQueSpybmdTZWVkLno7CiAgICAKICAgIHJuZ1NlZWQgXj0gcm5nU2VlZCA+PiAxNnU7CiAgICAKICAgIHJuZ1NlZWQueCArPSBybmdTZWVkLnkqcm5nU2VlZC53OyAKICAgIHJuZ1NlZWQueSArPSBybmdTZWVkLnoqcm5nU2VlZC54OyAKICAgIHJuZ1NlZWQueiArPSBybmdTZWVkLngqcm5nU2VlZC55OyAKICAgIHJuZ1NlZWQudyArPSBybmdTZWVkLnkqcm5nU2VlZC56OwogICAgCiAgICByZXR1cm4gcm5nU2VlZDsKfQoKLy8gR2VuZXJhdGVzIGEgdHVwbGUgb2YgY2Fub25pY2FsIHJhbmRvbSBudW1iZXIgYW5kIHVzZXMgdGhlbSB0byBzYW1wbGUgYW4gaW5wdXQgdGV4dHVyZQp2ZWM0IFJhbmQoc2FtcGxlcjJEIHNhbXBsZXIpCnsKICAgIHJldHVybiB0ZXhlbEZldGNoKHNhbXBsZXIsIChpdmVjMihnRnJhZ0Nvb3JkKSArIGl2ZWMyKFBDR0FkdmFuY2UoKSA+PiAxNikpICUgMTAyNCwgMCk7Cn0KCi8vIEdlbmVyYXRlcyBhIHR1cGxlIG9mIGNhbm9uaWNhbCByYW5kb20gbnVtYmVycyBpbiB0aGUgcmFuZ2UgWzAsIDFdCnZlYzQgUmFuZCgpCnsKICAgIHJldHVybiB2ZWM0KFBDR0FkdmFuY2UoKSkgLyBmbG9hdCgweGZmZmZmZmZmdSk7Cn0KCi8vIFNlZWQgdGhlIFBDRyBoYXNoIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgZnJhbWUgbXVsdGlwbGVkIGJ5IGEgcHJpbWUKdm9pZCBQQ0dJbml0aWFsaXNlKHVpbnQgZnJhbWUpCnsgICAgCiAgICBybmdTZWVkID0gdXZlYzQoMjAyMTl1LCA3MjQzdSwgMTI1NDd1LCAyODU3M3UpICogZnJhbWU7Cn0KCi8vIFJldmVyc2UgdGhlIGJpdHMgb2YgMzItYml0IGludGV0ZXIKdWludCBSYWRpY2FsSW52ZXJzZSh1aW50IGkpCnsKICAgIGkgPSAoKGkgJiAweGZmZmZ1KSA8PCAxNnUpIHwgKGkgPj4gMTZ1KTsKICAgIGkgPSAoKGkgJiAweDAwZmYwMGZmdSkgPDwgOHUpIHwgKChpICYgMHhmZjAwZmYwMHUpID4+IDh1KTsKICAgIGkgPSAoKGkgJiAweDBmMGYwZjBmdSkgPDwgNHUpIHwgKChpICYgMHhmMGYwZjBmMHUpID4+IDR1KTsKICAgIGkgPSAoKGkgJiAweDMzMzMzMzMzdSkgPDwgMnUpIHwgKChpICYgMHhjY2NjY2NjY3UpID4+IDJ1KTsgICAgCiAgICBpID0gKChpICYgMHg1NTU1NTU1NXUpIDw8IDF1KSB8ICgoaSAmIDB4YWFhYWFhYWF1KSA+PiAxdSk7ICAgICAgICAKICAgIHJldHVybiBpOwp9CgovLyBTYW1wbGVzIHRoZSByYWRpeC0yIEhhbHRvbiBzZXF1ZW5jZSBmcm9tIHNlZWQgdmFsdWUsIGkKZmxvYXQgSGFsdG9uQmFzZTIodWludCBpKQp7ICAgIAogICAgcmV0dXJuIGZsb2F0KFJhZGljYWxJbnZlcnNlKGkpKSAvIGZsb2F0KDB4ZmZmZmZmZmZ1KTsKfQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovLyAgICBIYXNoIGZ1bmN0aW9ucwovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovLyBDb25zdGFudHMgZm9yIHRoZSBGb3dsZXItTm9sbC1WbyBoYXNoIGZ1bmN0aW9uCi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zvd2xlci1Ob2xsLVZvX2hhc2hfZnVuY3Rpb24KI2RlZmluZSBrRk5WUHJpbWUgICAgICAgICAgICAgIDB4MDEwMDAxOTN1CiNkZWZpbmUga0ZOVk9mZnNldCAgICAgICAgICAgICAweDgxMWM5ZGM1dQojZGVmaW5lIGtEaW1zUGVyQm91bmNlICAgICAgICAgNAoKLy8gTWl4IGFuZCBjb21iaW5lIHR3byBoYXNoZXMKdWludCBIYXNoQ29tYmluZSh1aW50IGEsIHVpbnQgYikKewogICAgcmV0dXJuICgoKGEgPDwgKDMxdSAtIChiICYgMzF1KSkpIHwgKGEgPj4gKGIgJiAzMXUpKSkpIF4KICAgICAgICAgICAgKChiIDw8IChhICYgMzF1KSkgfCAoYiA+PiAoMzF1IC0gKGEgJiAzMXUpKSkpOwp9CgovLyBDb21wdXRlIGEgMzItYml0IEZvd2xlci1Ob2xsLVZvIGhhc2ggZm9yIHRoZSBnaXZlbiBpbnB1dAp1aW50IEhhc2hPZih1aW50IGkpCnsKICAgIHVpbnQgaCA9IChrRk5WT2Zmc2V0IF4gKGkgJiAweGZmdSkpICoga0ZOVlByaW1lOwogICAgaCA9IChoIF4gKChpID4+IDh1KSAmIDB4ZmZ1KSkgKiBrRk5WUHJpbWU7CiAgICBoID0gKGggXiAoKGkgPj4gMTZ1KSAmIDB4ZmZ1KSkgKiBrRk5WUHJpbWU7CiAgICBoID0gKGggXiAoKGkgPj4gMjR1KSAmIDB4ZmZ1KSkgKiBrRk5WUHJpbWU7CiAgICByZXR1cm4gaDsKfQoKdWludCBIYXNoT2YoaW50IGEpIHsgcmV0dXJuIEhhc2hPZih1aW50KGEpKTsgfQp1aW50IEhhc2hPZih1aW50IGEsIHVpbnQgYikgeyByZXR1cm4gSGFzaENvbWJpbmUoSGFzaE9mKGEpLCBIYXNoT2YoYikpOyB9CnVpbnQgSGFzaE9mKHVpbnQgYSwgdWludCBiLCB1aW50IGMpIHsgcmV0dXJuIEhhc2hDb21iaW5lKEhhc2hDb21iaW5lKEhhc2hPZihhKSwgSGFzaE9mKGIpKSwgSGFzaE9mKGMpKTsgfQp1aW50IEhhc2hPZih1aW50IGEsIHVpbnQgYiwgdWludCBjLCB1aW50IGQpIHsgcmV0dXJuIEhhc2hDb21iaW5lKEhhc2hDb21iaW5lKEhhc2hPZihhKSwgSGFzaE9mKGIpKSwgSGFzaENvbWJpbmUoSGFzaE9mKGMpLCBIYXNoT2YoZCkpKTsgfQp1aW50IEhhc2hPZih2ZWMyIHYpIHsgcmV0dXJuIEhhc2hDb21iaW5lKEhhc2hPZih1aW50KHYueCkpLCBIYXNoT2YodWludCh2LnkpKSk7IH0KdWludCBIYXNoT2YoaXZlYzIgdikgeyByZXR1cm4gSGFzaENvbWJpbmUoSGFzaE9mKHVpbnQodi54KSksIEhhc2hPZih1aW50KHYueSkpKTsgfQoKLy8gU2FtcGxlcyB0aGUgcmFkaXgtMiBIYWx0b24gc2VxdWVuY2UgZnJvbSBzZWVkIHZhbHVlLCBpCmZsb2F0IEhhc2hUb0Zsb2F0KHVpbnQgaSkKeyAgICAKICAgIHJldHVybiBmbG9hdChpKSAvIGZsb2F0KDB4ZmZmZmZmZmZ1KTsKfQoKY29uc3QgbWF0NCBrT3JkZXJlZERpdGhlciA9IG1hdDQodmVjNCgwLjAsIDguMCwgMi4wLCAxMC4pLCB2ZWM0KDEyLiwgNC4sIDE0LiwgNi4pLCB2ZWM0KDMuLCAxMS4sIDEuLCA5LiksIHZlYzQoMTUuLCA3LiwgMTMuLCA1LikpOwpmbG9hdCBPcmRlcmVkRGl0aGVyKCkKeyAgICAKICAgIHJldHVybiAoa09yZGVyZWREaXRoZXJbaW50KGdGcmFnQ29vcmQueCkgJiAzXVtpbnQoZ0ZyYWdDb29yZC55KSAmIDNdICsgMS4wKSAvIDE3LjA7Cn0KCnZlYzMgU2FtcGxlVW5pdFNwaGVyZSh2ZWMyIHhpKQp7CiAgICB4aS54ID0geGkueCAqIDIuMCAtIDEuMDsKICAgIHhpLnkgKj0ga1R3b1BpOwoKICAgIGZsb2F0IHNpblRoZXRhID0gc3FydCgxLjAgLSB4aS54ICogeGkueCk7CiAgICByZXR1cm4gdmVjMyhjb3MoeGkueSkgKiBzaW5UaGV0YSwgeGkueCwgc2luKHhpLnkpICogc2luVGhldGEpOwp9CgovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi8vICAgIENvbG91ciBmdW5jdGlvbnMKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKdmVjMyBIdWUoZmxvYXQgcGhpKQp7CiAgICBmbG9hdCBwaGlDb2xvdXIgPSA2LjAgKiBwaGk7CiAgICBpbnQgaSA9IGludChwaGlDb2xvdXIpOwogICAgdmVjMyBjMCA9IHZlYzMoKChpICsgNCkgLyAzKSAmIDEsICgoaSArIDIpIC8gMykgJiAxLCAoKGkgKyAwKSAvIDMpICYgMSk7CiAgICB2ZWMzIGMxID0gdmVjMygoKGkgKyA1KSAvIDMpICYgMSwgKChpICsgMykgLyAzKSAmIDEsICgoaSArIDEpIC8gMykgJiAxKTsgICAgICAgICAgICAgCiAgICByZXR1cm4gbWl4KGMwLCBjMSwgcGhpQ29sb3VyIC0gZmxvYXQoaSkpOwp9CgovLyBBIEdhdXNzaWFuIGZ1bmN0aW9uIHRoYXQgd2UgdXNlIHRvIHNhbXBsZSB0aGUgWFlaIHN0YW5kYXJkIG9ic2VydmVyIApmbG9hdCBDSUVYWVpHYXVzcyhmbG9hdCBsYW1iZGEsIGZsb2F0IGFscGhhLCBmbG9hdCBtdSwgZmxvYXQgc2lnbWExLCBmbG9hdCBzaWdtYTIpCnsKICAgcmV0dXJuIGFscGhhICogZXhwKHNxcihsYW1iZGEgLSBtdSkgLyAoLTIuMCAqIHNxcihsYW1iZGEgPCBtdSA/IHNpZ21hMSA6IHNpZ21hMikpKTsKfQoKdmVjMyBIU1ZUb1JHQih2ZWMzIGhzdikKewogICAgcmV0dXJuIG1peCh2ZWMzKDAuMCksIG1peCh2ZWMzKDEuMCksIEh1ZShoc3YueCksIGhzdi55KSwgaHN2LnopOwp9Cgp2ZWMzIFJHQlRvSFNWKCB2ZWMzIHJnYikKewogICAgLy8gVmFsdWUKICAgIHZlYzMgaHN2OwogICAgaHN2LnogPSBjd2lzZU1heChyZ2IpOwoKICAgIC8vIFNhdHVyYXRpb24KICAgIGZsb2F0IGNocm9tYSA9IGhzdi56IC0gY3dpc2VNaW4ocmdiKTsKICAgIGhzdi55ID0gKGhzdi56IDwgMWUtMTApID8gMC4wIDogKGNocm9tYSAvIGhzdi56KTsKCiAgICAvLyBIdWUKICAgIGlmIChjaHJvbWEgPCAxZS0xMCkgICAgICAgIHsgaHN2LnggPSAwLjA7IH0KICAgIGVsc2UgaWYgKGhzdi56ID09IHJnYi54KSAgICB7IGhzdi54ID0gKDEuMCAvIDYuMCkgKiAocmdiLnkgLSByZ2IueikgLyBjaHJvbWE7IH0KICAgIGVsc2UgaWYgKGhzdi56ID09IHJnYi55KSAgICB7IGhzdi54ID0gKDEuMCAvIDYuMCkgKiAoMi4wICsgKHJnYi56IC0gcmdiLngpIC8gY2hyb21hKTsgfQogICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgIHsgaHN2LnggPSAoMS4wIC8gNi4wKSAqICg0LjAgKyAocmdiLnggLSByZ2IueSkgLyBjaHJvbWEpOyB9CiAgICBoc3YueCA9IGZyYWN0KGhzdi54ICsgMS4wKTsKCiAgICByZXR1cm4gaHN2Owp9Cgp2ZWMzIFNhbXBsZVNwZWN0cnVtKGZsb2F0IGxhbWJkYSkKewogICAgLy8gSGVyZSB3ZSB1c2UgYSBzZXQgb2YgZml0dGVkIEdhdXNzaWFuIGN1cnZlcyB0byBhcHByb3hpbWF0ZSB0aGUgQ0lFIFhZWiBzdGFuZGFyZCBvYnNlcnZlci4KICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DSUVfMTkzMV9jb2xvcl9zcGFjZSBmb3IgZGV0YWxzIG9uIHRoZSBmb3JtdWxhCiAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBtYXAgdGhlIHNhbXBsZWQgd2F2ZWxlbmd0aCB0byB1c2FibGUgUkdCIHZhbHVlcy4gVGhpcyBjb2RlIG5lZWRzIGNsZWFuaW5nIAogICAgLy8gdXAgYmVjYXVzZSB3ZSBkbyBhbiB1bm5lY2Vzc2FyeSBub3JtYWxpc2F0aW9uIHN0ZXBzIGFzIHdlIG1hcCBmcm9tIGxhbWJkYSB0byBYWVogdG8gUkdCLgoKICAgICNkZWZpbmUga1JOb3JtICg3MDAwLjAgLSAzODAwLjApIC8gMTE0My4wNwogICAgI2RlZmluZSBrR05vcm0gKDcwMDAuMCAtIDM4MDAuMCkgLyAxMDY4LjcKICAgICNkZWZpbmUga0JOb3JtICg3MDAwLjAgLSAzODAwLjApIC8gMTA2OC4yNQoKICAgIC8vIFNhbXBsZSB0aGUgR2F1c3NpYW4gYXBwcm94aW1hdGlvbnMKICAgIHZlYzMgeHl6OwogICAgeHl6LnggPSAoQ0lFWFlaR2F1c3MobGFtYmRhLCAxLjA1NiwgNTk5OC4wLCAzNzkuMCwgMzEwLjApICsKICAgICAgICAgICAgIENJRVhZWkdhdXNzKGxhbWJkYSwgMC4zNjIsIDQ0MjAuMCwgMTYwLjAsIDI2Ny4wKSArCiAgICAgICAgICAgICBDSUVYWVpHYXVzcyhsYW1iZGEsIDAuMDY1LCA1MDExLjAsIDIwNC4wLCAyNjIuMCkpICoga1JOb3JtOwogICAgeHl6LnkgPSAoQ0lFWFlaR2F1c3MobGFtYmRhLCAwLjgyMSwgNTY4OC4wLCA0NjkuMCwgNDA1LjApICsKICAgICAgICAgICAgIENJRVhZWkdhdXNzKGxhbWJkYSwgMC4yODYsIDUzMDkuMCwgMTYzLjAsIDMxMS4wKSkgKiBrR05vcm07CiAgICB4eXoueiA9IChDSUVYWVpHYXVzcyhsYW1iZGEsIDEuMjE3LCA0MzcwLjAsIDExOC4wLCAzNjAuMCkgKwogICAgICAgICAgICAgQ0lFWFlaR2F1c3MobGFtYmRhLCAwLjY4MSwgNDU5MC4wLCAyNjAuMCwgMTM4LjApKSAqIGtCTm9ybTsKCiAgICAvLyBYWVogdG8gUkdCIGxpbmVhciB0cmFuc2Zvcm0KICAgIHZlYzMgcmdiOwogICAgcmdiLnIgPSAoMi4wNDE1OSAqIHh5ei54IC0gMC41NjUwICogeHl6LnkgLSAwLjM0NDczICogeHl6LnopIC8gKDIuMCAqIDAuNTY1KTsKICAgIHJnYi5nID0gKC0wLjk2OTI0ICogeHl6LnggKyAxLjg3NTk2ICogeHl6LnkgKyAwLjA0MTU1ICogeHl6LnopIC8gKDIuMCAqIDAuNDcyKTsKICAgIHJnYi5iID0gKDAuMDEzNDQgKiB4eXoueCAtIDAuMTE4NjMgKiB4eXoueSArIDEuMDE1MTcgKiB4eXoueikgLyAoMi4wICogMC40NTIpOwoKICAgIHJldHVybiByZ2I7Cn0KCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gICAgUmF5IHRyYWNpbmcKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKI2RlZmluZSBrSW52YWxpZEhpdCAgICAgICAgICAgICAgLTEuMAojZGVmaW5lIGtOdWxsUmF5ICAgICAgICAgICAgICAgICAtMS4wCgpzdHJ1Y3QgVHJhbnNmb3JtCnsKICAgIHZlYzMgdHJhbnM7CiAgICBtYXQzIHJvdDsKICAgIGZsb2F0IHNjYTsKfTsKCm1hdDMgSWRlbnRpdHkoKQp7CiAgICByZXR1cm4gbWF0Myh2ZWMzKDEuMCwgMC4wLCAwLjApLCB2ZWMzKDAuMCwgMS4wLCAwLjApLCB2ZWMzKDAuMCwgMC4wLCAxLjApKTsKfQoKbWF0MyBTY2FsZU1hdDMoZmxvYXQgc2NhbGUpCnsKICAgIGZsb2F0IGludlNjYWxlID0gMS4wZiAvIHNjYWxlOwogICAgcmV0dXJuIG1hdDModmVjMyhpbnZTY2FsZSwgMC4wLCAwLjApLAogICAgICAgICAgICB2ZWMzKDAuMCwgaW52U2NhbGUsIDAuMCksCiAgICAgICAgICAgIHZlYzMoMC4wLCAwLjAsIGludlNjYWxlKSk7Cn0KCm1hdDMgUm90WE1hdDMoZmxvYXQgdGhldGEpCnsKICAgIGZsb2F0IGNvc1RoZXRhID0gY29zKHRoZXRhKSwgc2luVGhldGEgPSBzaW4odGhldGEpOwogICAgcmV0dXJuIG1hdDModmVjMygxLjAsIDAuMCwgMC4wKSwKICAgICAgICAgICAgdmVjMygwLjAsIGNvc1RoZXRhLCAtc2luVGhldGEpLAogICAgICAgICAgICB2ZWMzKDAuMCwgc2luVGhldGEsIGNvc1RoZXRhKSk7Cn0KCm1hdDMgUm90WU1hdDMoY29uc3QgZmxvYXQgdGhldGEpCnsKICAgIGZsb2F0IGNvc1RoZXRhID0gY29zKHRoZXRhKSwgc2luVGhldGEgPSBzaW4odGhldGEpOwogICAgcmV0dXJuIG1hdDModmVjMyhjb3NUaGV0YSwgMC4wLCBzaW5UaGV0YSksCiAgICAgICAgICAgIHZlYzMoMC4wLCAxLjAsIDAuMCksCiAgICAgICAgICAgIHZlYzMoLXNpblRoZXRhLCAwLjAsIGNvc1RoZXRhKSk7Cn0KCm1hdDMgUm90Wk1hdDMoY29uc3QgZmxvYXQgdGhldGEpCnsKICAgIGZsb2F0IGNvc1RoZXRhID0gY29zKHRoZXRhKSwgc2luVGhldGEgPSBzaW4odGhldGEpOwogICAgcmV0dXJuIG1hdDModmVjMyhjb3NUaGV0YSwgLXNpblRoZXRhLCAwLjApLAogICAgICAgICAgICB2ZWMzKHNpblRoZXRhLCBjb3NUaGV0YSwgMC4wKSwKICAgICAgICAgICAgdmVjMygwLjAsIDAuMCwgMS4wKSk7Cn0KClRyYW5zZm9ybSBDb21wb3VuZFRyYW5zZm9ybSh2ZWMzIHRyYW5zLCB2ZWMzIHJvdCwgZmxvYXQgc2NhbGUpCnsKICAgIFRyYW5zZm9ybSB0cmFuc2Zvcm07CiAgICB0cmFuc2Zvcm0ucm90ID0gSWRlbnRpdHkoKTsKICAgIHRyYW5zZm9ybS5zY2EgPSBzY2FsZTsKCiAgICBpZiAocm90LnggIT0gMC4wKSB7IHRyYW5zZm9ybS5yb3QgKj0gUm90WE1hdDMocm90LngpOyB9CiAgICBpZiAocm90LnkgIT0gMC4wKSB7IHRyYW5zZm9ybS5yb3QgKj0gUm90WU1hdDMocm90LnkpOyB9CiAgICBpZiAocm90LnogIT0gMC4wKSB7IHRyYW5zZm9ybS5yb3QgKj0gUm90Wk1hdDMocm90LnopOyB9CgogICAgaWYgKHNjYWxlICE9IDEuMGYpIHsgdHJhbnNmb3JtLnJvdCAqPSBTY2FsZU1hdDMoc2NhbGUpOyB9CiAgICAKICAgIHJldHVybiB0cmFuc2Zvcm07Cn0KCi8vIEZhc3QgY29uc3RydWN0aW9uIG9mIG9ydGhvbm9ybWFsIGJhc2lzIHVzaW5nIHF1YXJ0ZXJuaW9ucyB0byBhdm9pZCBleHBlbnNpdmUgbm9ybWFsaXNhdGlvbiBhbmQgYnJhbmNoaW5nIAovLyBGcm9tIER1ZiBldCBhbCdzIHRlY2huaWNhbCByZXBvcnQgaHR0cHM6Ly9ncmFwaGljcy5waXhhci5jb20vbGlicmFyeS9PcnRob25vcm1hbEIvcGFwZXIucGRmLCBpbnNwaXJlZCBieQovLyBGcmlzdmFkJ3Mgb3JpZ2luYWwgcGFwZXI6IGh0dHA6Ly9vcmJpdC5kdHUuZGsvZmlsZXMvMTI2ODI0OTcyL29uYl9mcmlzdmFkX2pndDIwMTJfdjIucGRmCm1hdDMgQ3JlYXRlQmFzaXModmVjMyBuKQp7CiAgICBmbG9hdCBzID0gc2lnbihuLnopOwogICAgZmxvYXQgYSA9IC0xLjAgLyAocyArIG4ueik7CiAgICBmbG9hdCBiID0gbi54ICogbi55ICogYTsKICAgIAogICAgcmV0dXJuIG1hdDModmVjMygxLjBmICsgcyAqIG4ueCAqIG4ueCAqIGEsIHMgKiBiLCAtcyAqIG4ueCksCiAgICAgICAgICAgICAgICB2ZWMzKGIsIHMgKyBuLnkgKiBuLnkgKiBhLCAtbi55KSwKICAgICAgICAgICAgICAgIG4pOwp9CgptYXQzIENyZWF0ZUJhc2lzKHZlYzMgbiwgdmVjMyB1cCkKewogICAgdmVjMyB0YW5nZW50ID0gbm9ybWFsaXplKGNyb3NzKG4sIHVwKSk7CiAgICB2ZWMzIGNvdGFuZ2VudCA9IGNyb3NzKHRhbmdlbnQsIG4pOwoKICAgIHJldHVybiB0cmFuc3Bvc2UobWF0Myh0YW5nZW50LCBjb3RhbmdlbnQsIG4pKTsKfQoKLy8gVGhlIG1pbmltdW0gYW1vdW50IG9mIGRhdGEgcmVxdWlyZWQgdG8gZGVmaW5lIGFuIGluZmluaXRlIHJheSBpbiAzRCBzcGFjZQpzdHJ1Y3QgUmF5QmFzaWMKewogICAgdmVjMyAgIG87ICAgICAgICAgICAgICAgICAgIC8vIE9yaWdpbiAKICAgIHZlYzMgICBkOyAgICAgICAgICAgICAgICAgICAvLyBEaXJlY3Rpb24gIAp9OwoKLy8gVGhlICJmdWxsIGZhdCIgcmF5IG9iamVjdHMgdGhhdCBtb3N0IG1ldGhvZHMgd2lsbCByZWZlciB0bwpzdHJ1Y3QgUmF5CnsKICAgIFJheUJhc2ljIG9kOyAgICAgICAgICAgICAgICAKICAgIGZsb2F0ICAgIHROZWFyOyAgICAgICAgICAgICAKICAgIHZlYzMgICAgIHdlaWdodDsKICAgIHVpbnQgICAgIGZsYWdzOwogICAgLy9mbG9hdCAgICBsYW1iZGE7ICAgIAp9OwoKI2RlZmluZSBrRmxhZ3NCYWNrZmFjaW5nIDF1CiNkZWZpbmUga0ZsYWdzU3Vic3VyZmFjZSAydQojZGVmaW5lIGtGbGFnc0RpcmVjdFJheSAgNHUKCnN0cnVjdCBIaXRDdHgKewogICAgdmVjMyAgICAgbjsKICAgIGZsb2F0ICAgIGtpY2tvZmY7ICAgIAp9OwoKUmF5QmFzaWMgUmF5VG9PYmplY3RTcGFjZShpbiBSYXlCYXNpYyB3b3JsZCwgaW4gVHJhbnNmb3JtIHRyYW5zZm9ybSkgCnsKICAgIFJheUJhc2ljIG9iamVjdDsKICAgIG9iamVjdC5vID0gd29ybGQubyAtIHRyYW5zZm9ybS50cmFuczsKICAgIG9iamVjdC5kID0gd29ybGQuZCArIG9iamVjdC5vOwogICAgb2JqZWN0Lm8gPSB0cmFuc2Zvcm0ucm90ICogb2JqZWN0Lm87CiAgICBvYmplY3QuZCA9ICh0cmFuc2Zvcm0ucm90ICogb2JqZWN0LmQpIC0gb2JqZWN0Lm87CiAgICByZXR1cm4gb2JqZWN0Owp9Cgp2ZWM0IFNERlNpbXBsZXhGYWNlKGluIHZlYzMgcCwgaW4gdmVjMyB2WzRdLCBpbiB2ZWMzIG4pCnsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgZm9yKGludCBpID0gMDsgaSA8IDM7IGkrKykKICAgIHsKICAgICAgICB2ZWMzIGR2ID0gdlsoaSsxKSAlIDNdIC0gdltpXTsKICAgICAgICB2ZWMzIGVkZ2VOb3JtID0gbm9ybWFsaXplKGNyb3NzKGR2LCBuKSk7CiAgICAgICAgaWYoZG90KGVkZ2VOb3JtLCBwIC0gdltpXSkgPiAwLjApCiAgICAgICAgeyAgICAgICAgICAgIAogICAgICAgICAgICBmbG9hdCB0ID0gY2xhbXAoKGRvdChwLCBkdikgLSBkb3QodltpXSwgZHYpKSAvIGRvdChkdiwgZHYpLCAwLjAsIDEuMCk7CiAgICAgICAgICAgIHZlYzMgZ3JhZCA9IHAgLSAodltpXSArIHQgKiBkdik7CiAgICAgICAgICAgIHJldHVybiB2ZWM0KGxlbmd0aChncmFkKSwgZ3JhZCk7CiAgICAgICAgfQogICAgfQogICAgaWYoZG90KG4sIHAgLSB2WzBdKSA8IDAuMCkgeyBuID0gLW47IH0KICAgIHJldHVybiB2ZWM0KChkb3QocCwgbikgLSBkb3QodlswXSwgbikpLCBuKTsKfQoKYm9vbCBSYXlTaW1wbGV4U0RGKGlub3V0IFJheSByYXksIGlub3V0IHZlYzIgc2RmTmVhciwgb3V0IEhpdEN0eCBoaXQsIGluIFRyYW5zZm9ybSB0cmFuc2Zvcm0sIGluIGZsb2F0IGV4cGxvZGUsIGluIGludCBpbnRlcnZhbCwgaW4gZmxvYXQgcGhhc2UpCnsKICAgICNkZWZpbmUga1NERk1heFN0ZXBzICAgICAgICAgICAgIDUwCiAgICAjZGVmaW5lIGtTREZDdXRvZmZUaHJlc2hvbGQgICAgICAxZS00CiAgICAjZGVmaW5lIGtTREZFc2NhcGVUaHJlc2hvbGQgICAgICAyLjAKICAgICNkZWZpbmUga1NERlJheUluY3JlbWVudCAgICAgICAgIDAuOTUKICAgICNkZWZpbmUga1NERkZhaWxUaHJlc2hvbGQgICAgICAgIDAuMQogICAgCiAgICAjZGVmaW5lIGtOdW1JbnRlcnZhbHMgICAgICAgICAgICAyMAogICAgI2RlZmluZSBrQ2xvc2VkSW50ZXJ2YWwgICAgICAgICAgMTYKICAgIAogICAgUmF5QmFzaWMgbG9jYWxSYXkgPSBSYXlUb09iamVjdFNwYWNlKHJheS5vZCwgdHJhbnNmb3JtKTsKICAgIAogICAgZmxvYXQgbG9jYWxNYWcgPSBsZW5ndGgobG9jYWxSYXkuZCk7CiAgICBsb2NhbFJheS5kIC89IGxvY2FsTWFnOwogICAgCiAgICBmbG9hdCB0ID0gMC4wOyAgIAogICAgdmVjMyBwOwogICAgdmVjNCBGOwogICAgYm9vbCBpc1N1YnN1cmZhY2UsIGlzQm91bmRlZCA9IGZhbHNlOwoKICAgIGNvbnN0IHZlYzMgVls0XSA9IHZlYzNbXSh2ZWMzKDEsMSwxKSouNSwgdmVjMygtMSwtMSwxKSouNSwgdmVjMygxLC0xLC0xKSouNSwgdmVjMygtMSwxLC0xKSouNSk7CiAgICBjb25zdCBpbnQgSVsxNl0gPSBpbnRbXSggMCwgMiwgMSwgMCwgMSwgMywgMiwgMSwgMiwgMCwgMywgMiwgMywgMSwgMCwgMyk7CiAgICB2ZWMzIERbNF0sIE5bNF07ICAgICAKICAgICNkZWZpbmUga1NERlRoaWNrbmVzcyAwLjA1CiAgICAKICAgIGZsb2F0IGJldGEgPSBLaWNrRHJvcChwaGFzZSwgdmVjMigwLjAsIDAuMCksIHZlYzIoMC40LCAxLjIpLCB2ZWMyKDAuNSwgMS4wKSk7CiAgICBmbG9hdCBnYW1tYSA9IG1peCgxLjAsIDIuNSwgSW1wdWxzZShwaGFzZSwgMC40LCAwLjE1KSk7CiAgICAKICAgIGZvcihpbnQgaiA9IDA7IGogPCA0OyArK2opCiAgICB7CiAgICAgICAgaW50IGsgPSBqKjQ7CiAgICAgICAgdmVjMyBkID0gbWl4KFZbSVtrICsgaW50ZXJ2YWwlM11dLCBWW0lbayArIChpbnRlcnZhbCsxKSUzXV0sIGJldGEpICogZXhwbG9kZTsKICAgICAgICBpZihpbnRlcnZhbCA9PSAwKSB7IERbal0gPSBkICogYmV0YTsgfSAKICAgICAgICBlbHNlIGlmKGludGVydmFsIDwga0Nsb3NlZEludGVydmFsKSB7IERbal0gPSBkOyB9CiAgICAgICAgZWxzZSBpZihpbnRlcnZhbCA9PSBrQ2xvc2VkSW50ZXJ2YWwpIHsgRFtqXSA9IGQgKiAoMS4wIC0gYmV0YSk7IH0KICAgICAgICBlbHNlIHsgRFtqXSA9IGtaZXJvOyB9CiAgICAgICAgCiAgICAgICAgTltqXSA9IG5vcm1hbGl6ZShjcm9zcyhWW0lbaysxXV0gLSBWW0lba11dLCBWW0lbaysyXV0gLSBWW0lba11dKSk7CiAgICB9CiAgICAKICAgIGludCBzdGVwSWR4OwogICAgZm9yKHN0ZXBJZHggPSAwOyBzdGVwSWR4IDwga1NERk1heFN0ZXBzOyBzdGVwSWR4KyspCiAgICB7CiAgICAgICAgcCA9IGxvY2FsUmF5Lm8gKyBsb2NhbFJheS5kICogdDsKICAgICAgICAKICAgICAgICBGID0gdmVjNChrRmx0TWF4KTsKICAgICAgICBmb3IoaW50IGogPSAwOyBqIDwgNDsgaisrKQogICAgICAgIHsgICAgICAgICAgICAgIAogICAgICAgICAgICB2ZWM0IEZGYWNlID0gU0RGU2ltcGxleEZhY2UocCwgdmVjM1s0XShWW0lbaio0XV0gKyBEW2pdLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWW0lbaio0KzFdXSArIERbal0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZbSVtqKjQrMl1dICsgRFtqXSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVltJW2oqNCszXV0gKyBEW2pdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOW2pdKTsKCiAgICAgICAgICAgIEZGYWNlLnggPSBGRmFjZS54IC0ga1NERlRoaWNrbmVzcyAqIGdhbW1hOwogICAgICAgICAgICBpZihGRmFjZS54IDwgRi54KSAKICAgICAgICAgICAgeyAKICAgICAgICAgICAgICAgIEYgPSBGRmFjZTsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIAogICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24sIHNpbXBseSBkZXRlcm1pbmUgd2hldGhlciB3ZSdyZSBpbnNpZGUgdGhlIGlzb3N1cmZhY2Ugb3Igbm90CiAgICAgICAgaWYoc3RlcElkeCA9PSAwKSB7IGlzU3Vic3VyZmFjZSA9IEYueCA8IDAuMDsgfQogICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgdG8gc2VlIGlmIHdlJ3JlIGF0IHRoZSBzdXJmYWNlCiAgICAgICAgZWxzZSBpZihhYnMoRi54KSA8IGtTREZDdXRvZmZUaHJlc2hvbGQpIHsgYnJlYWs7IH0gICAgICAgIAogICAgICAgIAogICAgICAgIGlmKCFpc0JvdW5kZWQpIHsgaWYoRi54IDwga1NERkVzY2FwZVRocmVzaG9sZCkgeyBpc0JvdW5kZWQgPSB0cnVlOyB9IH0KICAgICAgICBlbHNlIGlmKEYueCA+IGtTREZFc2NhcGVUaHJlc2hvbGQpIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAgICAgCiAgICAgICAgdCArPSAoaXNTdWJzdXJmYWNlID8gLUYueCA6IEYueCkgKiBrU0RGUmF5SW5jcmVtZW50OwogICAgICAgIAogICAgICAgIGlmKGFicyhGLnggLyBsb2NhbE1hZykgPCBzZGZOZWFyLngpCiAgICAgICAgICAgICAgICAgICAgc2RmTmVhciA9IHZlYzIoYWJzKEYueCAvIGxvY2FsTWFnKSwgdCAvIGxvY2FsTWFnKTsKICAgICAgICAKICAgICAgICBpZih0IC8gbG9jYWxNYWcgPiByYXkudE5lYXIpIHsgYnJlYWs7IH0KICAgICAgICAKICAgICAgICBwID0gbG9jYWxSYXkubyArIHQgKiBsb2NhbFJheS5kOwogICAgfSAgICAgICAgCiAgICAKICAgIHQgLz0gbG9jYWxNYWc7CiAgICBpZihGLnggPiBrU0RGRmFpbFRocmVzaG9sZCB8fCB0ID4gcmF5LnROZWFyKSB7IHJldHVybiBmYWxzZTsgfQogICAgCiAgICByYXkudE5lYXIgPSB0OwogICAgaGl0Lm4gPSB0cmFuc3Bvc2UodHJhbnNmb3JtLnJvdCkgKiBub3JtYWxpemUoRi55encpICogdHJhbnNmb3JtLnNjYTsKICAgIHJheS5mbGFncyA9IChyYXkuZmxhZ3MgJiB+a0ZsYWdzQmFja2ZhY2luZykgfCAoKGlzU3Vic3VyZmFjZSkgPyBrRmxhZ3NCYWNrZmFjaW5nIDogMHUpOwogICAgaGl0LmtpY2tvZmYgPSAxZS0yOwoKICAgIHJldHVybiB0cnVlOwp9CgpSYXkgQ3JlYXRlT3J0aG9ncmFwaGljQ2FtZXJhUmF5KHZlYzIgdXYsIHZlYzIgc2Vuc29yU2l6ZSwgdmVjMyBjYW1lcmFQb3MsIHZlYzMgY2FtZXJhTG9va0F0KQp7CiAgICB2ZWMzIHcgPSBub3JtYWxpemUoY2FtZXJhTG9va0F0IC0gY2FtZXJhUG9zKTsKICAgIG1hdDMgYmFzaXMgPSBDcmVhdGVCYXNpcyh3LCB2ZWMzKDAuMCwgMS4wLCAwLjApKTsgICAgCiAgICAKICAgIFJheSByYXk7CiAgICByYXkub2QubyA9IGNhbWVyYVBvcyArIHZlYzModXYgKiBzZW5zb3JTaXplLCAwLjApICogYmFzaXM7CiAgICByYXkub2QuZCA9IHc7CiAgICByYXkud2VpZ2h0ID0gdmVjMygxLjApOwogICAgcmV0dXJuIHJheTsKfQoKdmVjMyBSYXlQb2ludEF0KGluIFJheSByYXksIGZsb2F0IHQpCnsKICAgIHJldHVybiByYXkub2QubyArIHJheS5vZC5kICogdDsKfQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovLyAgICBGaWx0ZXJzCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiNkZWZpbmUga0FwcGx5Qmxvb20gICAgICAgICAgICAgICB0cnVlCiNkZWZpbmUga0Jsb29tR2FpbiAgICAgICAgICAgICAgICAxLjUgICAgICAgICAgICAgLy8gVGhlIHN0cmVuZ3RoIG9mIHRoZSBibG9vbSBlZmZlY3QgCiNkZWZpbmUga0Jsb29tVGludCAgICAgICAgICAgICAgICB2ZWMzKDEuMCkgICAgICAgLy8gVGhlIHRpbnQgYXBwbGllZCB0byB0aGUgYmxvb20gZWZmZWN0CiNkZWZpbmUga0Jsb29tV2lkdGggICAgICAgICAgICAgICAoMC4xIC8gZmxvYXQoa1NjcmVlbkRvd25zYW1wbGUpKSAgICAgICAgICAgICAvLyBUaGUgd2lkdGggb2YgdGhlIGJsb29tIGVmZmVjdCBhcyBhIHByb3BvcnRpb24gb2YgdGhlIGJ1ZmZlciB3aWR0aAojZGVmaW5lIGtCbG9vbUhlaWdodCAgICAgICAgICAgICAgKDAuMSAvIGZsb2F0KGtTY3JlZW5Eb3duc2FtcGxlKSkgICAgICAgICAgICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgYmxvb20gZWZmZWN0IGFzIGEgcHJvcG9ydGlvbiBvZiB0aGUgYnVmZmVyIGhlaWdodAojZGVmaW5lIGtCbG9vbVNoYXBlICAgICAgICAgICAgICAgMC41ICAgICAgICAgICAgIC8vIFRoZSBmYWxsLW9mZiBvZiB0aGUgYmxvb20gc2hhcGUuIEhpZ2hlciB2YWx1ZSA9IHN0ZWVwZXIgZmFsbC1vZmYKI2RlZmluZSBrQmxvb21Eb3duc2FtcGxlICAgICAgICAgIDIgICAgICAgICAgICAgICAvLyBIb3cgbXVjaCB0aGUgYmxvb20gYnVmZmVyIGlzIGRvd25zYW1wbGVkLiBIaWdoZXIgdmFsdWUgPSBsb3dlciBxdWFsaXR5LCBidXQgZmFzdGVyCiNkZWZpbmUga0RlYnVnQmxvb20gICAgICAgICAgICAgICBmYWxzZSAgICAgICAgICAgLy8gU2hvdyBvbmx5IHRoZSBibG9vbSBpbiB0aGUgZmluYWwgY29tcAojZGVmaW5lIGtCbG9vbUJ1cm5JbiAgICAgICAgICAgICAgdmVjMygwLjMpICAgICAKCi8vIFNlcGVyYWJsZSBibG9vbSBmdW5jdGlvbi4gVGhpcyBmaWx0ZXIgcmVxdWlyZXMgdHdvIHBhc3NlcyBpbiB0aGUgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgZGlyZWN0aW9ucyB3aGljaCBhcmUgY29tYmluZWQgYXMgYSBwb3N0LXByb2Nlc3MKLy8gZWZmZWN0IGFmdGVyIGVhY2ggZnJhbWUuIFRoZSBhY2N1cmFjeS9jb3N0IG9mIHRoZSBlZmZlY3QgY2FuIGJlIHR1bmVkIGJ5IGRpYWxpbmcgdGhlIGtCbG9vbURvd25zYW1wbGUgcGFyYW1ldGVyLiAKdmVjMyBCbG9vbSh2ZWMyIGZyYWdDb29yZCwgdmVjMyBpUmVzb2x1dGlvbiwgaXZlYzIgZGVsdGEsIHNhbXBsZXIyRCByZW5kZXJTYW1wbGVyKQp7ICAgICAgICAKICAgIHZlYzIgc2NhbGVkUmVzb2x1dGlvbiA9IHZlYzIoaVJlc29sdXRpb24ueCwgaVJlc29sdXRpb24ueSkgLyBmbG9hdCgoZGVsdGEueCA9PSAxKSA/IGtCbG9vbURvd25zYW1wbGUgOiAxKTsKICAgCiAgICBpZihmcmFnQ29vcmQueCA+IHNjYWxlZFJlc29sdXRpb24ueCB8fCBmcmFnQ29vcmQueSA+IHNjYWxlZFJlc29sdXRpb24ueSkgeyByZXR1cm4ga1plcm87IH0KICAgIAogICAgZmxvYXQgYmxvb21TaXplID0gKGRlbHRhLnggPT0gMSkgPyBrQmxvb21XaWR0aCA6IGtCbG9vbUhlaWdodDsKICAgIAogICAgaW50IGtLZXJuZWxXaWR0aCA9IGludChibG9vbVNpemUgKiBtYXgoaVJlc29sdXRpb24ueCwgaVJlc29sdXRpb24ueSkgKyAwLjUpIC8gKChkZWx0YS54ID09IDEpID8ga0Jsb29tRG93bnNhbXBsZSA6IDEpOwogICAgdmVjMyBzdW1XZWlnaHRzID0gdmVjMygwLjApOwogICAgdmVjMyBzdW1SZ2IgPSB2ZWMzKDAuMCk7CiAgICBmb3IoaW50IGkgPSAta0tlcm5lbFdpZHRoOyBpIDw9IGtLZXJuZWxXaWR0aDsgaSsrKQogICAgeyAgICAgIAogICAgICAgIHZlYzIgeHkgPSB2ZWMyKGZyYWdDb29yZC54ICsgZmxvYXQoaSAqIGRlbHRhLngpLCBmcmFnQ29vcmQueSArIGZsb2F0KGkgKiBkZWx0YS55KSk7CiAgICAgICAgCiAgICAgICAgaWYoZGVsdGEueCA9PSAxKSB7IHh5ICo9IGZsb2F0KGtCbG9vbURvd25zYW1wbGUpOyB9CiAgICAgICAgZWxzZSB7IHh5IC89IGZsb2F0KGtCbG9vbURvd25zYW1wbGUpOyB9CiAgICAgICAgCiAgICAgICAgaWYoeHkueCA8IDAuMCB8fCB4eS54ID4gaVJlc29sdXRpb24ueCB8fCB4eS55IDwgMC4wIHx8IHh5LnkgPiBpUmVzb2x1dGlvbi55KSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIAogICAgICAgIHZlYzQgdGV4ZWwgPSB0ZXh0dXJlKHJlbmRlclNhbXBsZXIsIHh5IC8gaVJlc29sdXRpb24ueHkpOwogICAgICAgIHZlYzMgcmdiID0gbWF4KHRleGVsLnh5eiAvIG1heCgxLjAsIHRleGVsLncpLCB2ZWMzKDAuMCkpOyAgICAgICAgICAgIAogICAgICAgIGZsb2F0IGQgPSBmbG9hdChhYnMoaSkpIC8gZmxvYXQoa0tlcm5lbFdpZHRoKTsKICAgICAgICAgICAKICAgICAgICB2ZWMzIHdlaWdodCA9IGtPbmU7CiAgICAgICAgaWYoaSAhPSAwKQogICAgICAgIHsKICAgICAgICAgICAgLy8gQ3VycmVudGx5IHVzaW5nIGEgc2luZ2xlIHdlaWdodCBhbHRob3VnaCB0aGlzIGVmZmVjdCBjYW4gYmUgZG9uZSBwZXItY2hhbm5lbAogICAgICAgICAgICBmbG9hdCBrZXJuZWwgPSBwb3cobWF4KDAuMCwgKGV4cCgtc3FyKGQgKiA0LjApKSAtIDAuMDE4MzE1NikgLyAwLjk4MTY4NCksIGtCbG9vbVNoYXBlKTsgICAgICAgICAgICAKICAgICAgICAgICAgd2VpZ2h0ID0ga09uZSAqIGtlcm5lbDsKICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIHN1bVJnYiArPSAoKGRlbHRhLnkgPT0gMSkgPyByZ2IgOiBtYXgoa1plcm8sIHJnYiAtIGtCbG9vbUJ1cm5JbikpICogd2VpZ2h0OyAgICAgICAgIAogICAgICAgIHN1bVdlaWdodHMgKz0gd2VpZ2h0OwogICAgfQogICAgCiAgICBzdW1SZ2IgPSBzdW1SZ2IgLyBzdW1XZWlnaHRzOwogICAgCiAgICByZXR1cm4gKGRlbHRhLnggPT0gMSkgPyBzdW1SZ2IgOiAoc3VtUmdiICoga0Jsb29tVGludCk7Cn0",
					"AQAAAAAAAAABAAAAAAAAAAAAAACKZgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAACKZgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/3d/SDF.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/2d/SDF.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/core/LinearRegression.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/2d/QuadraticBezier.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/3d/QuadraticBezier.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/core/Colour.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/2d/PostProcessing.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"file": "examples/shadertoy/readme.txt",
			"file_size": 0,
			"file_write_time": 132902011022081218,
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/core/Hash.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/core/Random.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// *******************************************************************************************************\n//    Filters\n// *******************************************************************************************************\n\n#define kApplyBloom               true\n#define kBloomGain                1.4             // The strength of the bloom effect \n#define kBloomTint                vec3(1.0)       // The tint applied to the bloom effect\n#define kBloomWidth               (0.2 / float(kScreenDownsample))             // The width of the bloom effect as a proportion of the buffer width\n#define kBloomHeight              (0.05 / float(kScreenDownsample))             // The height of the bloom effect as a proportion of the buffer height\n#define kBloomShape               2.0             // The fall-off of the bloom shape. Higher value = steeper fall-off\n#define kBloomDownsample          1               // How much the bloom buffer is downsampled. Higher value = lower quality, but faster\n#define kDebugBloom               false           // Show only the bloom in the final comp\n#define kBloomBurnIn              vec3(0.6)     \n\n// Seperable bloom function. This filter requires two passes in the horizontal and vertical directions which are combined as a post-process\n// effect after each frame. The accuracy/cost of the effect can be tuned by dialing the kBloomDownsample parameter. \nvec3 Bloom(vec2 xyImage, vec3 resoltuion, ivec2 delta, sampler2D renderSampler)\n{        \n    vec2 scaledResolution = vec2(iResolution.x, iResolution.y) / float((delta.x == 1) ? kBloomDownsample : 1);\n   \n    if(fragCoord.x > scaledResolution.x || fragCoord.y > scaledResolution.y) { return kZero; }\n    \n    float bloomSize = (delta.x == 1) ? kBloomWidth : kBloomHeight;\n    \n    int kKernelWidth = int(bloomSize * max(iResolution.x, iResolution.y) + 0.5) / ((delta.x == 1) ? kBloomDownsample : 1);\n    vec3 sumWeights = vec3(0.0);\n    vec3 sumRgb = vec3(0.0);\n    for(int i = -kKernelWidth; i <= kKernelWidth; i++)\n    {      \n        vec2 xy = vec2(fragCoord.x + float(i * delta.x), fragCoord.y + float(i * delta.y));\n        \n        if(delta.x == 1) { xy *= float(kBloomDownsample); }\n        else { xy /= float(kBloomDownsample); }\n        \n        if(xy.x < 0.0 || xy.x > iResolution.x || xy.y < 0.0 || xy.y > iResolution.y) { continue; }\n            \n        vec4 texel = texture(renderSampler, xy / iResolution.xy);\n        vec3 rgb = max(texel.xyz / max(1.0, texel.w), vec3(0.0));            \n        float d = float(abs(i)) / float(kKernelWidth);\n           \n        vec3 weight = kOne;\n        if(i != 0)\n        {\n            // Currently using a single weight although this effect can be done per-channel\n            float kernel = pow(max(0.0, (exp(-sqr(d * 4.0)) - 0.0183156) / 0.981684), kBloomShape);            \n            weight = kOne * kernel;\n        }\n            \n        sumRgb += ((delta.y == 1) ? rgb : max(kZero, rgb - kBloomBurnIn)) * weight;         \n        sumWeights += weight;\n    }\n    \n    sumRgb = sumRgb / sumWeights;\n    \n    return (delta.x == 1) ? sumRgb : (sumRgb * kBloomTint);\n}",
			"file": "src/2d/Filter.glsl",
			"file_size": 0,
			"file_write_time": 132902019595938978,
			"settings":
			{
				"buffer_size": 3120,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAMwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "uimqt3"
					},
					"BwAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACFBQAAAAAAAAkAAABmcmFnQ29vcmSFBQAAAAAAAIYFAAAAAAAAAAAAAIYFAAAAAAAAhwUAAAAAAAAAAAAAhwUAAAAAAACIBQAAAAAAAAAAAACIBQAAAAAAAIkFAAAAAAAAAAAAAIkFAAAAAAAAigUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					6,
					"left_delete",
					null,
					"BgAAAIkFAAAAAAAAiQUAAAAAAAABAAAAM4gFAAAAAAAAiAUAAAAAAAABAAAAdIcFAAAAAAAAhwUAAAAAAAABAAAAcYYFAAAAAAAAhgUAAAAAAAABAAAAbYUFAAAAAAAAhQUAAAAAAAABAAAAaYQFAAAAAAAAhAUAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAigUAAAAAAACKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "iamgeX"
					},
					"BgAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAACJBQAAAAAAAIoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIQFAAAAAAAAhAUAAAAAAAAGAAAAaWFtZ2VY",
					"AQAAAAAAAAABAAAAigUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "imageXy"
					},
					"BwAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAACJBQAAAAAAAIoFAAAAAAAAAAAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAAIoFAAAAAAAAigUAAAAAAAABAAAAeYkFAAAAAAAAiQUAAAAAAAABAAAAWA",
					"AQAAAAAAAAABAAAAiwUAAAAAAACLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIQFAAAAAAAAhAUAAAAAAAAFAAAAaW1hZ2U",
					"AQAAAAAAAAABAAAAiQUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "xyImage"
					},
					"BwAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAACJBQAAAAAAAIoFAAAAAAAAAAAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAJIFAAAAAAAAkgUAAAAAAAALAAAAaVJlc29sdXRpb24",
					"AQAAAAAAAAABAAAAkgUAAAAAAACdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "xyResol"
					},
					"BwAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAACUBQAAAAAAAJUFAAAAAAAAAAAAAJUFAAAAAAAAlgUAAAAAAAAAAAAAlgUAAAAAAACXBQAAAAAAAAAAAACXBQAAAAAAAJgFAAAAAAAAAAAAAJgFAAAAAAAAmQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "ution"
					},
					"BQAAAJkFAAAAAAAAmgUAAAAAAAAAAAAAmgUAAAAAAACbBQAAAAAAAAAAAACbBQAAAAAAAJwFAAAAAAAAAAAAAJwFAAAAAAAAnQUAAAAAAAAAAAAAnQUAAAAAAACeBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQUAAAAAAACZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAJIFAAAAAAAAkgUAAAAAAAAMAAAAeHlSZXNvbHV0aW9u",
					"AQAAAAAAAAABAAAAngUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAJIFAAAAAAAAkwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "Re"
					},
					"AgAAAJQFAAAAAAAAlQUAAAAAAAAAAAAAlQUAAAAAAACWBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAUAAAAAAACUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					4,
					"left_delete",
					null,
					"BAAAAJUFAAAAAAAAlQUAAAAAAAABAAAAZZQFAAAAAAAAlAUAAAAAAAABAAAAUpMFAAAAAAAAkwUAAAAAAAABAAAALJIFAAAAAAAAkgUAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAlgUAAAAAAACWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "resoltuion,"
					},
					"CwAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAACUBQAAAAAAAJUFAAAAAAAAAAAAAJUFAAAAAAAAlgUAAAAAAAAAAAAAlgUAAAAAAACXBQAAAAAAAAAAAACXBQAAAAAAAJgFAAAAAAAAAAAAAJgFAAAAAAAAmQUAAAAAAAAAAAAAmQUAAAAAAACaBQAAAAAAAAAAAACaBQAAAAAAAJsFAAAAAAAAAAAAAJsFAAAAAAAAnAUAAAAAAAAAAAAAnAUAAAAAAACdBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAAJIFAAAAAAAAkgUAAAAAAAAKAAAAcmVzb2x0dWlvbg",
					"AQAAAAAAAAABAAAAnAUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "resoltuion"
					},
					"CgAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAACUBQAAAAAAAJUFAAAAAAAAAAAAAJUFAAAAAAAAlgUAAAAAAAAAAAAAlgUAAAAAAACXBQAAAAAAAAAAAACXBQAAAAAAAJgFAAAAAAAAAAAAAJgFAAAAAAAAmQUAAAAAAAAAAAAAmQUAAAAAAACaBQAAAAAAAAAAAACaBQAAAAAAAJsFAAAAAAAAAAAAAJsFAAAAAAAAnAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/core/Wavelets.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/3d/Emitter.glsl",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/projects/glslfx",
		"/C/projects/glslfx/examples",
		"/C/projects/glslfx/examples/shadertoy",
		"/C/projects/glslfx/examples/shadertoy/simplex",
		"/C/projects/glslfx/src",
		"/C/projects/glslfx/src/2d",
		"/C/projects/glslfx/src/3d",
		"/C/projects/glslfx/src/core",
		"/C/projects/glslfx/src/tools"
	],
	"file_history":
	[
		"/C/Users/ben.spencer/Downloads/Microsoft.ML.OnnxRuntime.Gpu.1.10.0/build/native/include/onnxruntime_c_api.h",
		"/C/projects/probegen/data/onnx/test.onnx",
		"/C/Users/ben.spencer/Downloads/VSIXTorch.vsix",
		"/C/projects/Pix2PixTerrain/Python/Models/Grid2Grid/Dataset.py",
		"/C/projects/glslfx/src/3d/SphericalHarmonics.glsl",
		"/C/projects/glslfx/src/core/Filters.glsl",
		"/C/projects/glslfx/src/3d/KIFS.glsl",
		"/C/projects/glslfx/src/3d/Camera.glsl",
		"/C/projects/glslfx/src/3d/Primatives.glsl",
		"/C/projects/glslfx/src/core/Transforms.glsl",
		"/C/projects/glslfx/src/core/Quarternions.glsl",
		"/C/projects/glslfx/src/core/Splines.glsl",
		"/C/projects/glslfx/src/core/Math.glsl",
		"/C/Users/ben.spencer/Videos/Captures/ffmpeg transcode.txt",
		"/C/Users/ben.spencer/Desktop/MyData/Playlist1.json",
		"/C/Users/ben.spencer/Desktop/MyData/StreamingHistory0.json",
		"/C/Users/ben.spencer/Desktop/MyData/SearchQueries.json",
		"/D/Steam/steamapps/common/Halo Infinite/NOTICE.txt",
		"/C/projects/probegen-scenes/grid2grid/cornellstatic/data/scene-000000.direct.0446563185.usda",
		"/C/Users/ben.spencer/Desktop/remarkable/test.svg",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.indirect.1416168154000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.0789172247000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene-000019-8.indirect.1347281681000207.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.0481962437000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.0217680512000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.1556433466000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.0775691504000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.indirect.2040565540000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.direct.0875534463000000.json",
		"/C/projects/probegen-scenes/lightprobedenoiser/mono/data/scene--00001-0.indirect.0908147705000000.json",
		"/C/projects/probegen/data/usd/cornell000000.direct.0543624672.000000.json",
		"/C/scratch/FB1242829/test.html",
		"/C/projects/pt/.gitignore",
		"/C/projects/pt/scenes/environmentprobe.json",
		"/C/projects/pt/scenes/cornell.json",
		"/C/projects/pt/scenes/config.json",
		"/C/projects/scratch/main2.cpp",
		"/C/Users/ben.spencer/Pictures/heart.svg",
		"/C/projects/scratch/common.glsl",
		"/C/projects/scratch/buffer A.glsl",
		"/C/projects/scratch/main.cpp",
		"/C/projects/shadertoy/automata/bufferA.glsl",
		"/C/projects/shadertoy/automata/bufferB.glsl",
		"/C/projects/shadertoy/automata/bufferC.glsl",
		"/C/projects/shadertoy/automata/image.glsl",
		"/C/projects/scratch/buffer B.glsl",
		"/C/projects/scratch/buffer C.glsl",
		"/C/projects/pt/scenes/codec/block.h",
		"/C/projects/unity/commits.txt",
		"/C/projects/scratch/data/hadamard.txt",
		"/C/projects/scratch/data/hadamard.svg",
		"/C/projects/scratch/math.h",
		"/C/projects/scratch/image.glsl",
		"/C/scratch/shadertoy/shaders.json",
		"/C/projects/pt/scenes/codec/block2.h",
		"/C/projects/pt/src/generic/AdaptiveBinaryCoder.h",
		"/C/projects/scratch/dump.txt",
		"/C/projects/pt/scenes/codec/histogram.dat",
		"/C/projects/pt/src/generic/ArithmeticCoder.h",
		"/C/projects/pt/scenes/codec/encoder.dat",
		"/C/projects/scratch/ArithmeticCoder.h",
		"/C/projects/pt/src/generic/ShadertoyArithmeticCoder.h",
		"/C/projects/pt/src/generic/ArithmeticCoderUtils.h",
		"/C/projects/scratch/data/rca.csv",
		"/C/projects/pt/src/math/Math.h",
		"/C/Users/ben.spencer/Documents/Mongoose/weather.htm",
		"/C/Users/ben.spencer/Downloads/Lighting Team RCA Map - Scratchpad.csv",
		"/C/projects/pt/src/main.cpp",
		"/C/projects/pt/src/math/BBox3.h",
		"/C/projects/pt/src/math/Vector.h",
		"/C/projects/pt/src/generic/ColourUtils.h",
		"/C/projects/pt/src/generic/thirdparty/sobol/Sobol.h",
		"/C/projects/pt/src/generic/FNVHash.h",
		"/C/projects/pt/CMakeLists.txt",
		"/C/projects/pt/build/output.vcxproj",
		"/C/projects/openexr/OpenEXR/CMakeLists.txt",
		"/C/projects/openexr/CMakeLists.txt",
		"/C/projects/pt/src/generic/FilesystemUtils.cpp",
		"/C/projects/pt/src/generic/FilesystemUtils.h",
		"/C/projects/pt/src/renderer/AssetContainer.h",
		"/C/projects/pt/src/renderer/AssetFactory.h",
		"/C/projects/pt/src/renderer/BVHBuilder.cpp",
		"/C/projects/pt/src/renderer/BxDF.cpp",
		"/C/projects/pt/src/renderer/BxDF.h",
		"/C/projects/pt/src/renderer/TextureShader.h",
		"/C/projects/pt/src/renderer/Emitter.cpp",
		"/C/projects/pt/src/renderer/TextureShader.cpp",
		"/C/projects/pt/src/renderer/EnvironmentLight.cpp",
		"/C/projects/unity/Editor/Src/GI/Progressive/ScratchpadMemoryPool.h",
		"/C/projects/pt/src/renderer/Emitter.h",
		"/C/projects/scratch/ScratchpadMemoryPool.h",
		"/C/projects/pt/src/generic/TinySVG.h",
		"/C/projects/pt/src/math/EnvironmentPDF2.h",
		"/C/projects/pt/src/math/PDF2.h",
		"/C/projects/pt/src/generic/StdHeaders.h",
		"/C/projects/pt/src/generic/Interpolate.h",
		"/C/projects/pt/src/image/ImageFactory.h",
		"/C/projects/pt/src/renderer/EnvironmentLight.h",
		"/C/projects/pt/src/renderer/Mesh.cpp",
		"/C/projects/pt/src/renderer/PathTracer.cpp",
		"/C/projects/pt/src/renderer/PathTracer.h",
		"/C/projects/pt/src/math/SphericalHarmonics.h",
		"/C/projects/pt/src/math/SphericalHarmonics.cpp",
		"/C/projects/gittest/FileA.txt",
		"/C/projects/gittest/FileB.txt",
		"/C/projects/pt/src/renderer/Ray.h",
		"/C/projects/pt/src/renderer/Renderer.cpp",
		"/C/projects/pt/src/renderer/Tracable.cpp",
		"/C/projects/pt/src/renderer/Camera.cpp",
		"/C/projects/pt/src/renderer/Camera.h",
		"/C/projects/pt/src/generic/thirdparty/base64/Base64.cpp",
		"/C/projects/pt/src/generic/JsonUtils.cpp",
		"/C/projects/pt/src/image/ImageContainer.cpp",
		"/C/projects/pt/src/image/ImageContainer.h",
		"/C/projects/unity/gi-docs/view.cmd",
		"/C/projects/pt/src/image/ImageIO.h",
		"/C/projects/pt/src/generic/JsonUtils.h",
		"/C/projects/unity/Editor/Src/GI/Progressive/PVRLightmapBakeHeavyData.cpp",
		"/C/projects/toy_path_tracer/src/generic/FloatPairMuxer.h",
		"/C/projects/pt/scenes/ffmpeg.txt",
		"/C/projects/pt/src/renderer/Renderer.h",
		"/C/projects/pt/src/image/DecomposedImageFilePath.h",
		"/C/projects/pt/src/image/DecomposedImageFilePath.cpp",
		"/C/projects/pt/src/renderer/Scene.cpp",
		"/C/projects/pt/src/generic/Assert.h",
		"/C/projects/pt/src/renderer/Tracable.h",
		"/C/projects/pt/src/renderer/VolumeSampleCache.cpp",
		"/C/projects/pt/src/image/Image.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"C:\\projects\\pt\\src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Load",
			"sphere",
			"true",
			"sphere/2",
			"sphere/1",
			"sphere/12",
			"light_sphere/1",
			"light_sphere",
			"light_sphere/2",
			"light_sphere/2 ",
			"light_sphere/2",
			"light_sphere",
			"ccssc",
			"abcX, abcY, ",
			"Arc(",
			"test(",
			" <<",
			"<< ",
			"<<",
			"inverse",
			"min",
			"bvhDepth",
			"maxDepth",
			"flagBit",
			"flagIdx",
			"bvhFlags",
			"flags",
			"kNumBVHLeaves",
			"kNumPaths",
			"quadPolyList",
			"bb",
			"abc",
			"QuadraticCurve",
			"CubicBezier",
			"QuadraticCurve",
			"489",
			".i00",
			".i20",
			".i10",
			".i02",
			".i01",
			".i22",
			".i21",
			".i12",
			".i11",
			"true",
			"noisy",
			"gridDirect",
			"gridDirectID",
			"filtered",
			"gridAdaptive",
			"grid_filtered_direct",
			"grid_filtered_direct_half",
			"inputGridHalfID",
			"outputGridHalfID",
			"noisy",
			"direct",
			"h ",
			"kMove",
			"y2",
			"std::make_pair<",
			"bb0",
			"min",
			"kFltMax",
			"std::vector<std::vector<Vector2f>>",
			"OL",
			"'\\0",
			"(const char* buffer",
			"coords",
			"idx",
			"ParseBezier",
			"grad1",
			"grad0",
			"quad",
			"eigen",
			"quadParams",
			"b",
			"b.",
			"b0",
			"tinyxml2",
			"long",
			"double",
			"cubicBezierKnots",
			"bezIdx",
			"bezierPoints",
			"v",
			"v0",
			"p2",
			"d2Tangent",
			"Vector2f ",
			"length(",
			"dot(",
			"magnitude",
			"magntiude",
			"segIdx",
			"quadParams",
			"absoluteMode",
			"extent",
			"max(",
			"parseSpline",
			"vec2",
			"intRng",
			"buffer",
			".y",
			".x",
			".0",
			".5",
			"5,",
			"0,",
			"            ",
			"                ",
			"               ",
			"              ",
			"             ",
			"            ",
			"           ",
			"          ",
			"         ",
			"        ",
			"            ",
			"                ",
			"               ",
			"              ",
			"             ",
			"            ",
			" \n",
			",  ",
			" , "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SHRGB<3>",
			"-100",
			"-1",
			"0",
			"",
			"PT_ASSERT",
			"math::min",
			"math::max",
			"PT_ASSERT"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/2d/ImageCodec.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/core/SphericalHarmonics.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "examples/shadertoy/simplex/BufferA.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13199,
						"regions":
						{
						},
						"selection":
						[
							[
								13199,
								13199
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 7.0,
						"translation.y": 4383.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "examples/shadertoy/simplex/Common.glsl",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28047,
						"regions":
						{
						},
						"selection":
						[
							[
								24815,
								24815
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9955.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/3d/SDF.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/2d/SDF.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "C:\\projects\\glslfx\\src\\tools",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "C:\\projects\\glslfx\\src\\core",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/core/LinearRegression.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/2d/QuadraticBezier.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/3d/QuadraticBezier.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/core/Colour.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/2d/PostProcessing.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "examples/shadertoy/readme.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/core/Hash.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/core/Random.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/2d/Filter.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3120,
						"regions":
						{
						},
						"selection":
						[
							[
								1748,
								1748
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/core/Wavelets.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/3d/Emitter.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "glslfx.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"splineparse\\main.cpp"
			],
			[
				"mono",
				"probegen-scenes\\lightprobedenoiser\\mono\\mono.json"
			],
			[
				"corne",
				"probegen-scenes\\misc\\cornell.json"
			],
			[
				"main2",
				"C:\\projects\\scratch\\main2.cpp"
			],
			[
				"math",
				"C:\\projects\\pt\\src\\math\\Vector.h"
			],
			[
				"arith",
				"ArithmeticCoder.h"
			],
			[
				"ar",
				"ArithmeticCoder.h"
			],
			[
				"shad",
				"C:\\projects\\pt\\src\\generic\\ShadertoyArithmeticCoder.h"
			],
			[
				"",
				"math.h"
			],
			[
				"base",
				"src\\generic\\thirdparty\\base64\\Base64.cpp"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"spher",
				"src\\math\\SphericalHarmonics.h"
			],
			[
				"render",
				"src\\renderer\\Renderer.cpp"
			],
			[
				"camera",
				"src\\renderer\\Camera.cpp"
			],
			[
				"col",
				"src\\generic\\ColourUtils.h"
			],
			[
				"camer",
				"src\\renderer\\Camera.h"
			],
			[
				"camea",
				"src\\renderer\\Camera.h"
			],
			[
				"scene",
				"src\\renderer\\Scene.cpp"
			],
			[
				"ren",
				"src\\renderer\\Renderer.cpp"
			],
			[
				"path",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"vec",
				"src\\math\\Vector.h"
			],
			[
				"colo",
				"src\\generic\\ColourUtils.h"
			],
			[
				"vector",
				"src\\math\\Vector.h"
			],
			[
				"stat",
				"src\\math\\Statistic.h"
			],
			[
				"mathf",
				"src\\generic\\thirdparty\\eigen\\src\\Core\\MathFunctionsImpl.h"
			],
			[
				"tbb",
				"src\\generic\\Tbb.h"
			],
			[
				"std",
				"src\\generic\\StdHeaders.h"
			],
			[
				"patht",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"envir",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"container",
				"src\\renderer\\AssetContainer.h"
			],
			[
				"bxdf",
				"src\\renderer\\BxDF.h"
			],
			[
				"emitter",
				"src\\renderer\\Emitter.h"
			],
			[
				"bxd",
				"src\\renderer\\BxDF.h"
			],
			[
				"rendere",
				"src\\renderer\\Renderer.cpp"
			],
			[
				"tex",
				"src\\renderer\\TextureShader.cpp"
			],
			[
				"image",
				"src\\image\\ImageIO.cpp"
			],
			[
				"trac",
				"src\\renderer\\Tracable.h"
			],
			[
				"assetco",
				"src\\renderer\\AssetContainer.h"
			],
			[
				"samp",
				"src\\renderer\\Sampler.h"
			],
			[
				"enviro",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"env",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"mai",
				"src\\main.cpp"
			],
			[
				"fnvha",
				"src\\generic\\FNVHash.h"
			],
			[
				"sobol",
				"src\\generic\\thirdparty\\sobol\\Sobol.h"
			],
			[
				"tiny",
				"src\\generic\\TinySVG.h"
			],
			[
				"imageio",
				"src\\image\\ImageIO.cpp"
			],
			[
				"pathtr",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"mat",
				"src\\math\\Math.h"
			],
			[
				"envi",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"emitt",
				"src\\renderer\\Emitter.h"
			],
			[
				"en",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"cdf2",
				"src\\math\\PDF2.h"
			],
			[
				"pdf2",
				"src\\math\\PDF2.h"
			],
			[
				"sam",
				"src\\renderer\\Sampler.h"
			],
			[
				"inter",
				"src\\generic\\Interpolate.h"
			],
			[
				"pdf",
				"src\\math\\PDF2.h"
			],
			[
				"imagefac",
				"src\\image\\ImageFactory.h"
			],
			[
				"image.h",
				"src\\image\\Image.h"
			],
			[
				"cdf",
				"src\\math\\CDF2.h"
			],
			[
				"sampler",
				"src\\renderer\\Sampler.h"
			],
			[
				"bx",
				"src\\renderer\\BxDF.h"
			],
			[
				"tra",
				"src\\renderer\\Tracable.h"
			],
			[
				"renderer",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"pat",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"emi",
				"src\\renderer\\Emitter.h"
			],
			[
				"ray",
				"src\\renderer\\Ray.h"
			],
			[
				"sa",
				"src\\renderer\\Sampler.h"
			],
			[
				"sampe",
				"src\\renderer\\Sampler.h"
			],
			[
				"stdh",
				"src\\generic\\StdHeaders.h"
			],
			[
				"sinys",
				"src\\generic\\TinySVG.h"
			],
			[
				"tinys",
				"src\\generic\\TinySVG.h"
			],
			[
				"vect",
				"src\\math\\Vector.h"
			],
			[
				"mesh",
				"src\\renderer\\Mesh.cpp"
			],
			[
				"asset",
				"src\\renderer\\AssetFactory.h"
			],
			[
				"abs",
				"src\\image\\AbstractImage.h"
			],
			[
				"imagecon",
				"src\\image\\ImageContainer.h"
			],
			[
				"imagecont",
				"src\\image\\ImageContainer.h"
			],
			[
				"ImageIO",
				"src\\image\\ImageIO.cpp"
			],
			[
				"asse",
				"src\\renderer\\AssetFactory.h"
			],
			[
				"em",
				"src\\renderer\\Emitter.cpp"
			],
			[
				"ray.h",
				"src\\renderer\\Ray.h"
			],
			[
				"pathr",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"envc",
				"src\\renderer\\EnvironmentLight.cpp"
			],
			[
				"ra",
				"src\\renderer\\Ray.h"
			],
			[
				"pathtra",
				"src\\renderer\\PathTracer.cpp"
			],
			[
				"emit",
				"src\\renderer\\Emitter.cpp"
			],
			[
				"cmakel",
				"CMakeLists.txt"
			],
			[
				"image ",
				"src\\image\\Image.h"
			],
			[
				"traca",
				"src\\renderer\\Tracable.h"
			],
			[
				"rend",
				"src\\renderer\\Renderer.cpp"
			],
			[
				"assert",
				"src\\renderer\\AssetFactory.h"
			],
			[
				"file",
				"src\\generic\\FilesystemUtils.cpp"
			],
			[
				"re",
				"src\\renderer\\Renderer.cpp"
			],
			[
				"abst",
				"src\\image\\AbstractImage.cpp"
			],
			[
				"dec",
				"src\\image\\DecomposedImageFilePath.cpp"
			],
			[
				"filesys",
				"src\\generic\\FilesystemUtils.cpp"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"string",
				"src\\generic\\StringUtils.h"
			],
			[
				"abstra",
				"src\\image\\AbstractImage.h"
			],
			[
				"imagefiel",
				"src\\image\\ImageFilePathManager.h"
			],
			[
				"scene.cpp",
				"src\\renderer\\Scene.cpp"
			],
			[
				"abstr",
				"src\\image\\AbstractImage.h"
			],
			[
				"coloru",
				"src\\generic\\ColourUtils.h"
			],
			[
				"basis",
				"src\\math\\Basis.h"
			],
			[
				"iamgeio",
				"src\\image\\ImageIO.cpp"
			],
			[
				"iamge.h",
				"src\\image\\Image.h"
			],
			[
				"stdhead",
				"src\\generic\\StdHeaders.h"
			],
			[
				"math.h",
				"src\\math\\Math.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 394.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
